{"version":3,"file":"static/js/250.0bbcfc95.chunk.js","mappings":"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","sources":["services/fetchDataApi.js","components/Pages/CharacterDetailsView.js","components/Pages/Details.js","components/Pages/ErrorView.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = 'https://rickandmortyapi.com/api';\r\naxios.defaults.baseURL = BASE_URL;\r\n\r\nexport const fetchAllCharactersApi = async (pageNumber, status, species) => {\r\n  let endpoint = `character?page=${pageNumber}&status=${status}&species=${species}`\r\n\r\n  try {\r\n    const result = await axios.get(endpoint);\r\n    const data = result.data;\r\n    if (result.status === 200) return data;\r\n    if (result.status === 400) throw new Error();\r\n  } catch (error) {\r\n    return error.massage\r\n  }\r\n}\r\n\r\nexport const fetchCardApi = async (id) => {\r\n  let endpoint = `character/${id}`\r\n\r\n  try {\r\n    const result = await axios.get(endpoint);\r\n    const data = result.data;\r\n    if (result.status === 200) return data;\r\n    if (result.status === 400) throw new Error();\r\n  } catch (error) {\r\n    return error.massage\r\n  }\r\n}\r\n","export const CharacterDetailsView = ({ characterDetails, handleClick }) => {\r\n  const { name, status, species, type, gender, origin, location, image } =\r\n    characterDetails;\r\n  return (\r\n    <div className=\"container d-flex justify-content-center\">\r\n      <div className=\"d-flex flex-column gap-2\">\r\n        <header>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary my-2\"\r\n            onClick={handleClick}\r\n          >\r\n            back\r\n          </button>\r\n          <h2 className=\"text-center fs-3\">Character's name: {name}</h2>\r\n        </header>\r\n        <main className=\"d-flex justify-content-center flex-column w-50\">\r\n          <img src={image} alt=\"photo\" />\r\n          <div className=\"fs-6\">\r\n            <p className=\"text-center fs-6\">Status: {status}</p>\r\n            <p className=\"text-center fs-6\">\r\n              Type:\r\n              {type === '' ? ' Unknown' : type}\r\n            </p>\r\n            <p className=\"text-center fs-6\">Species: {species}</p>\r\n            <p className=\"text-center fs-6\">Gender: {gender}</p>\r\n            <p className=\"text-center fs-6\">Origin: {origin?.name}</p>\r\n            <p className=\"text-center fs-6\">Location: {location?.name}</p>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { fetchCardApi } from '../../services/fetchDataApi';\r\nimport { CharacterDetailsView } from './CharacterDetailsView';\r\nimport ErrorView from './ErrorView';\r\nimport Loader from '../Loader/Loader';\r\n\r\nconst Status = {\r\n  IDLE: 'idle',\r\n  PENDING: 'pending',\r\n  RESOLVED: 'resolved',\r\n  REJECTED: 'rejected',\r\n};\r\n\r\nconst Details = () => {\r\n  const [characterDetails, setCharacterDetails] = useState({});\r\n  const [error, setError] = useState(null);\r\n  const [status, setStatus] = useState(null);\r\n\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    if (!characterDetails) {\r\n      // Первый рендер, это пустой объект, не делаем fetch\r\n      return;\r\n    }\r\n\r\n    setStatus(Status.PENDING);\r\n\r\n    fetchCardApi(params.id)\r\n      .then(res => {\r\n        setCharacterDetails(res);\r\n        setStatus(Status.RESOLVED);\r\n      })\r\n      .catch(error => {\r\n        setError(error.message);\r\n        setStatus(Status.REJECTED);\r\n      });\r\n  }, [params.id]);\r\n\r\n  const handleClick = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  if (status === Status.IDLE) {\r\n    return <div>Go ahead...</div>;\r\n  }\r\n\r\n  if (status === Status.PENDING) {\r\n    return <Loader />;\r\n  }\r\n\r\n  if (status === Status.REJECTED) {\r\n    return <ErrorView message={error.message} />;\r\n  }\r\n\r\n  if (status === Status.RESOLVED) {\r\n    return (\r\n      <CharacterDetailsView\r\n        characterDetails={characterDetails}\r\n        handleClick={handleClick}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nexport default Details;\r\n","import errorImage from '../../asserts/images/error.jpg';\r\n\r\nconst ErrorView = ({ message }) => {\r\n  return (\r\n    <div className=\"position-absolute top-50 start-50 translate-middle\">\r\n      <img src={errorImage} width=\"240\" alt=\"errorImage\" />\r\n      <p className=\"text-center fs-6 mb-3\">{message}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default ErrorView;\r\n"],"names":["axios","defaults","baseURL","CharacterDetailsView","_ref","characterDetails","handleClick","name","status","species","type","gender","origin","location","image","_jsx","className","children","_jsxs","onClick","src","alt","Status","Details","setCharacterDetails","useState","error","setError","setStatus","navigate","useNavigate","params","useParams","useEffect","async","endpoint","concat","id","result","get","data","Error","massage","fetchCardApi","then","res","catch","message","Loader","ErrorView","errorImage","width"],"sourceRoot":""}