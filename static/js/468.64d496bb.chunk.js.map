{"version":3,"file":"static/js/468.64d496bb.chunk.js","mappings":"kLAAO,MAAMA,EAAuBC,IAA4B,IAA3B,KAAEC,EAAI,YAAEC,GAAaF,EACxD,MAAM,KAAEG,EAAI,OAAEC,EAAM,QAAEC,EAAO,KAAEC,EAAI,OAAEC,EAAM,OAAEC,EAAM,SAAEC,EAAQ,MAAEC,GAAUT,EACzE,OACEU,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0CAAyCC,UACtDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,UACEL,KAAK,SACLM,UAAU,uBACVG,QAASb,EAAYW,SACtB,UAGDC,EAAAA,EAAAA,MAAA,MAAIF,UAAU,mBAAkBC,SAAA,CAAC,qBAAmBV,SAEtDW,EAAAA,EAAAA,MAAA,QAAMF,UAAU,iDAAgDC,SAAA,EAC9DF,EAAAA,EAAAA,KAAA,OAAKK,IAAKN,EAAOO,IAAI,eACrBH,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,MAAA,KAAGF,UAAU,mBAAkBC,SAAA,CAAC,WAAST,MACzCU,EAAAA,EAAAA,MAAA,KAAGF,UAAU,mBAAkBC,SAAA,CAAC,QAEpB,KAATP,EAAc,WAAaA,MAE9BQ,EAAAA,EAAAA,MAAA,KAAGF,UAAU,mBAAkBC,SAAA,CAAC,YAAUR,MAC1CS,EAAAA,EAAAA,MAAA,KAAGF,UAAU,mBAAkBC,SAAA,CAAC,WAASN,MACzCO,EAAAA,EAAAA,MAAA,KAAGF,UAAU,mBAAkBC,SAAA,CAAC,WAAe,OAANL,QAAM,IAANA,OAAM,EAANA,EAAQL,SACjDW,EAAAA,EAAAA,MAAA,KAAGF,UAAU,mBAAkBC,SAAA,CAAC,aAAmB,OAARJ,QAAQ,IAARA,OAAQ,EAARA,EAAUN,kBAIvD,E,+BCrBVe,EAAAA,EAAMC,SAASC,QADE,kC,WCRV,MAAMC,EAAuBC,GAASA,EAAMC,QAAQC,iBAE9CC,EAA0BH,GACrCA,EAAMC,QAAQE,wBAEHC,EAAwBJ,GACnCA,EAAMC,QAAQG,sBCgEhB,EAlDgBC,KAKd,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,KACTC,GAAWC,EAAAA,EAAAA,MAEXV,GAAUW,EAAAA,EAAAA,IAAYb,GACtBc,GAAYD,EAAAA,EAAAA,IAAYT,GACxBW,GAAQF,EAAAA,EAAAA,IAAYR,IAE1BW,EAAAA,EAAAA,YAAU,KFtB6BC,MEuBrCN,GFvBqCM,EEuBFR,EAAOQ,GFtBrCC,UACLP,GAASQ,EAAAA,EAAAA,OACT,IACE,MAAMC,QAAiBvB,EAAAA,EAAMwB,IAAI,cAADC,OAAeL,IAC3CG,EAASxC,MACX2C,QAAQC,IAAIJ,EAASxC,MACrB+B,GAASc,EAAAA,EAAAA,IAA2BL,EAASxC,QAE7C+B,GAASe,EAAAA,EAAAA,IAA2B,oBAExC,CAAE,MAAOX,GACPY,MAAM,gCACNhB,GAASe,EAAAA,EAAAA,IAA2BX,EAAMa,SAC5C,IES8C,GAiB7C,CAACnB,EAAOQ,GAAIN,IAEf,MAAM9B,EAAcA,KAClB0B,EAAS,IAAI,EAGf,OAAIO,GACKxB,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,IAGZd,EACKA,EAAMa,QAGX1B,GACKZ,EAAAA,EAAAA,KAACZ,EAAoB,CAACE,KAAMsB,EAASrB,YAAaA,SAD3D,CAEA,C","sources":["components/Pages/CharacterDetailsView.js","redux/characterDetails/operations.js","redux/characterDetails/selectors.js","components/Pages/Details.js"],"sourcesContent":["export const CharacterDetailsView = ({ data, handleClick }) => {\r\n  const { name, status, species, type, gender, origin, location, image } = data;\r\n  return (\r\n    <div className=\"container d-flex justify-content-center\">\r\n      <div className=\"d-flex flex-column gap-2\">\r\n        <header>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary my-2\"\r\n            onClick={handleClick}\r\n          >\r\n            back\r\n          </button>\r\n          <h2 className=\"text-center fs-3\">Character's name: {name}</h2>\r\n        </header>\r\n        <main className=\"d-flex justify-content-center flex-column w-50\">\r\n          <img src={image} alt=\"character\" />\r\n          <div className=\"fs-6\">\r\n            <p className=\"text-center fs-6\">Status: {status}</p>\r\n            <p className=\"text-center fs-6\">\r\n              Type:\r\n              {type === '' ? ' Unknown' : type}\r\n            </p>\r\n            <p className=\"text-center fs-6\">Species: {species}</p>\r\n            <p className=\"text-center fs-6\">Gender: {gender}</p>\r\n            <p className=\"text-center fs-6\">Origin: {origin?.name}</p>\r\n            <p className=\"text-center fs-6\">Location: {location?.name}</p>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  getCharacterDetailsRequest,\r\n  getCharacterDetailsSuccess,\r\n  getCharacterDetailsFailuer,\r\n} from './actions';\r\n\r\nimport axios from 'axios';\r\n\r\nconst BASE_URL = 'https://rickandmortyapi.com/api';\r\naxios.defaults.baseURL = BASE_URL;\r\n\r\nexport const getSingleCharacterDetails = id => {\r\n  return async dispatch => {\r\n    dispatch(getCharacterDetailsRequest());\r\n    try {\r\n      const response = await axios.get(`/character/${id}`);\r\n      if (response.data) {\r\n        console.log(response.data);\r\n        dispatch(getCharacterDetailsSuccess(response.data));\r\n      } else {\r\n        dispatch(getCharacterDetailsFailuer('No data recieved'));\r\n      }\r\n    } catch (error) {\r\n      alert('Sorry, something went wrong.');\r\n      dispatch(getCharacterDetailsFailuer(error.message));\r\n    }\r\n  };\r\n};\r\n","export const characterDetailsData = state => state.details.characterDetails;\r\n\r\nexport const characterDetailsLoading = state =>\r\n  state.details.characterDetailsLoading;\r\n\r\nexport const characterDetailsError = state =>\r\n  state.details.characterDetailsError;\r\n","import { useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n//import { fetchCardApi } from '../../services/fetchDataApi';\r\nimport { CharacterDetailsView } from './CharacterDetailsView';\r\nimport Loader from '../Loader/Loader';\r\nimport { getSingleCharacterDetails } from '../../redux/characterDetails/operations';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  characterDetailsData,\r\n  characterDetailsLoading,\r\n  characterDetailsError,\r\n} from '../../redux/characterDetails/selectors';\r\n\r\n// const Status = {\r\n//   IDLE: 'idle',\r\n//   PENDING: 'pending',\r\n//   RESOLVED: 'resolved',\r\n//   REJECTED: 'rejected',\r\n// };\r\n\r\nconst Details = () => {\r\n  // const [characterDetails, setCharacterDetails] = useState({});\r\n  // const [error, setError] = useState(null);\r\n  // const [status, setStatus] = useState(null);\r\n\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n  const dispatch = useDispatch();\r\n\r\n  const details = useSelector(characterDetailsData);\r\n  const isLoading = useSelector(characterDetailsLoading);\r\n  const error = useSelector(characterDetailsError);\r\n\r\n  useEffect(() => {\r\n    dispatch(getSingleCharacterDetails(params.id));\r\n    // if (!characterDetails) {\r\n    //   // Первый рендер, это пустой объект, не делаем fetch\r\n    //   return;\r\n    // }\r\n\r\n    // setStatus(Status.PENDING);\r\n\r\n    // fetchCardApi(params.id)\r\n    //   .then(res => {\r\n    //     setCharacterDetails(res);\r\n    //     setStatus(Status.RESOLVED);\r\n    //   })\r\n    //   .catch(error => {\r\n    //     setError(error.message);\r\n    //     setStatus(Status.REJECTED);\r\n    //   });\r\n  }, [params.id, dispatch]);\r\n\r\n  const handleClick = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  if (error) {\r\n    return error.message;\r\n  }\r\n\r\n  if (details) {\r\n    return <CharacterDetailsView data={details} handleClick={handleClick} />;\r\n  }\r\n};\r\n\r\nexport default Details;\r\n"],"names":["CharacterDetailsView","_ref","data","handleClick","name","status","species","type","gender","origin","location","image","_jsx","className","children","_jsxs","onClick","src","alt","axios","defaults","baseURL","characterDetailsData","state","details","characterDetails","characterDetailsLoading","characterDetailsError","Details","navigate","useNavigate","params","useParams","dispatch","useDispatch","useSelector","isLoading","error","useEffect","id","async","getCharacterDetailsRequest","response","get","concat","console","log","getCharacterDetailsSuccess","getCharacterDetailsFailuer","alert","message","Loader"],"sourceRoot":""}